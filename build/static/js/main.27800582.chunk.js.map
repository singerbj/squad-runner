{"version":3,"sources":["Config.js","GameState.js","PeerJsManager.js","gameScreens/PlayersConnect.jsx","GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["PLAYERS_CONNECT","CHOOSE_ROLE","VOTE_JOURNEY","ON_JOURNEY","STATS_REVIEW","VOTE_SPY","JOURNEY_REVIEW","GAME_REVIEW","INITIAL_STATE","phase","hostId","undefined","players","timeRemaining","reducer","state","action","type","numberOfPlayers","Object","keys","length","Config","deviceId","playerId","playerName","connected","lastMessage","Date","now","isHost","forEach","player","gameState","nextHost","Context","createContext","GameState","children","useReducer","dispatch","Provider","value","PeerJsManager","useContext","useEffect","serverId","result","charactersLength","i","charAt","Math","floor","random","makeid","peer","window","Peer","debug","connectionsArray","on","id","console","log","conn","metadata","gameStarted","morePlayersCanJoin","playerHasConnectedBefore","push","data","JSON","parse","send","setTimeout","close","err","setInterval","filter","peerConnection","iceConnectionState","Fragment","PlayersConnect","map","hardwareId","hostPlayer","playerJsx","key","split","join","GameContainer","appCss","fontFamily","fontSize","color","zIndex","position","top","left","width","height","padding","navigator","userAgent","indexOf","options","cast","framework","CastReceiverOptions","disableIdleTimeout","CastReceiverContext","getInstance","start","setupChromeCast","App","className","style","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27800582.chunk.js","sourcesContent":["export default {\n  MAX_PLAYERS: 6,\n  MAX_HEARTBEAT_INTERVAL: 3000,\n  CHECK_CONNECTION_INTERVAL: 500,\n  SEND_STATE_INTERVAL: 250,\n  TIME_TO_CHOOSE_ROLE: 30000,\n  TIME_TO_VOTE_JOURNEY: 30000,\n  TIME_TO_VOTE_SPY: 60000,\n  TIME_INTERVAL: 1000,\n  HOST_ID_LENGTH: 6,\n  GAME_STATE: {\n    PLAYERS_CONNECT: 0,\n    CHOOSE_ROLE: 1,\n    VOTE_JOURNEY: 2,\n    ON_JOURNEY: 3,\n    STATS_REVIEW: 4,\n    VOTE_SPY: 5,\n    JOURNEY_REVIEW: 6,\n    GAME_REVIEW: 7,\n  },\n  COLORS: {\n    BLACK: \"#222222\",\n    WHITE: \"#DDDDDD\"\n  }\n};\n","import React, { createContext, useReducer } from 'react';\nimport Config from './Config';\n\nconst INITIAL_STATE = {\n    phase: 0,\n    hostId: undefined,\n    players: {},\n    timeRemaining: undefined,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_HOST_ID':\n            return {\n                ...state,\n                hostId: action.hostId\n            }\n        case 'PLAYER_CONNECTED':\n            var numberOfPlayers = Object.keys(state.players).length;\n            if (numberOfPlayers < Config.MAX_PLAYERS) {\n                var players = { ...state.players };\n                players[action.deviceId] = {\n                    deviceId: action.deviceId,\n                    playerId: action.playerId,\n                    playerName: action.playerName,\n                    connected: true,\n                    lastMessage: Date.now(),\n                    isHost: false\n                };\n\n                if (numberOfPlayers === 0) {\n                    players[action.deviceId].isHost = true;\n                }\n\n                return {\n                    ...state,\n                    players: {\n                        ...players\n                    }\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        case 'CHECK_CONNECTIONS':\n            var players = { ...state.players };\n\n            Object.keys(players).forEach((deviceId) => {\n                let player = players[deviceId];\n                if (player.connected && player.lastMessage < (Date.now() - Config.MAX_HEARTBEAT_INTERVAL)) {\n                    player.connected = false;\n                    if (state.gameState === Config.GAME_STATE.PLAYERS_CONNECT) {\n                        if (player.isHost) {\n                            delete players[deviceId];\n                            var nextHost = players[Object.keys(players)[0]];\n                            if (nextHost) {\n                                nextHost.isHost = true;\n                            }\n                        } else {\n                            delete players[deviceId];\n                        }\n                    }\n                }\n            });\n\n            return {\n                ...state,\n                players: {\n                    ...players\n                }\n            }\n        case 'HEARTBEAT':\n            var players = { ...state.players };\n            var player = players[action.deviceId];\n            if (player) {\n                player.lastMessage = Date.now();\n                return {\n                    ...state,\n                    players: {\n                        ...players\n                    }\n                }\n            } else {\n                return {\n                    ...state\n                };\n            }\n        case 'SET_TIME_REMAINING':\n            return {\n                ...state,\n                timeRemaining: action.timeRemaining\n            };\n        case 'START_GAME':\n            var players = { ...state.players };\n            var player = players[action.deviceId];\n            if (player.isHost) {\n                return {\n                    ...state,\n                    gameState: Config.GAME_STATE.CHOOSE_ROLE\n                };\n            } else {\n                return {\n                    ...state\n                };\n            }\n        // case 'ROLE_SELECT':\n        //     var players = { ...state.players };\n        //     var player = players[action.deviceId];\n        //     var roleSelected = action.data.roleSelected;\n\n        //     var roleAlreadySelected = Object.keys(players).filter((deviceId) => {\n        //         return players[deviceId].role === roleSelected;\n        //     }).length > 0;\n\n        //     if (!roleAlreadySelected) {\n        //         player.role = roleSelected;\n        //         return {\n        //             ...state,\n        //             players: {\n        //                 ...players\n        //             }\n        //         }\n        //     } else {\n        //         return {\n        //             ...state\n        //         };\n        //     }\n        // case 'ROLE_SELECT_TIME_EXPIRE':\n        //     var players = { ...state.players };\n\n        //assign roles to remaining players who did not select one\n\n        default:\n            return state\n    }\n}\n\nexport const Context = createContext(INITIAL_STATE);\n\nexport const GameState = ({ children }) => {\n    const [gameState, dispatch] = useReducer(reducer, INITIAL_STATE);\n    return (\n        <Context.Provider value={{ gameState, dispatch }}>\n            {children}\n        </Context.Provider>\n    );\n}\n","import React, { useEffect, useContext } from \"react\";\nimport { Context } from './GameState';\nimport Config from './Config';\n\nconst makeid = (length) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n};\n\nexport const PeerJsManager = () => {\n    const { gameState, dispatch } = useContext(Context);\n\n    useEffect(() => {\n        var serverId = makeid(Config.HOST_ID_LENGTH);\n        var peer = new window.Peer(serverId, { debug: 3 });\n        var connectionsArray = [];\n\n        peer.on('open', function (id) {\n            if (peer.id === null) {\n                console.log('Received null id from peer open');\n            } else {\n                dispatch({\n                    type: 'SET_HOST_ID',\n                    hostId: peer.id\n                });\n            }\n        });\n\n        peer.on('connection', function (conn) {\n            const playerName = conn.metadata ? conn.metadata.playerName : undefined;\n            const deviceId = conn.metadata ? conn.metadata.deviceId : undefined;\n            let numberOfPlayers = Object.keys(gameState.players).length;\n            if (playerName && deviceId) {\n                let gameStarted = !gameState.phase === Config.GAME_STATE.PLAYERS_CONNECT;\n                let morePlayersCanJoin = numberOfPlayers < Config.MAX_PLAYERS;\n                let playerHasConnectedBefore = gameState.players[deviceId];\n                if ((!gameStarted && morePlayersCanJoin) || (gameStarted && playerHasConnectedBefore)) {\n                    console.log(\"Connected to: \" + conn.peer + \" with playerName: \" + playerName);\n                    connectionsArray.push(conn);\n                    dispatch({\n                        type: 'PLAYER_CONNECTED',\n                        deviceId,\n                        playerId: conn.peer,\n                        playerName\n                    });\n\n                    conn.on('data', function (data) {\n                        console.log('data recieved from ' + conn.peer + ':', data);\n                        dispatch(JSON.parse(data));\n                    });\n                    conn.on('close', function (data) {\n                        console.log('close (conn) ' + conn.peer + ':', data);\n                    });\n                    conn.on('error', function (data) {\n                        console.log('error (conn) ' + conn.peer + ':', data);\n                    });\n                } else {\n                    if (gameStarted) {\n                        console.log(\"Game already started, closing connection.\");\n                        conn.send({ type: \"GAME_STARTED\" });\n                        setTimeout(() => { conn.close(); }, 1000);\n                    } else if (!gameStarted) {\n                        console.log(\"Too many connected players, closing connection.\");\n                        conn.send({ type: \"TOO_MANY_PLAYERS\" });\n                        setTimeout(() => { conn.close(); }, 1000);\n                    }\n                }\n            } else {\n                console.log(\"Invalid Game connection, closing connection.\");\n                conn.send({ type: \"GAME_STARTED\" });\n                setTimeout(() => { conn.close(); }, 1000);\n            }\n        });\n\n        peer.on('disconnected', function (conn) {\n            console.log('Connection lost. Please reconnect', conn);\n        });\n\n        peer.on('close', function () {\n            console.log('Connection destroyed');\n        });\n\n        peer.on('error', function (err) {\n            console.log(err);\n        });\n\n        setInterval(() => {\n            connectionsArray = connectionsArray.filter((conn) => {\n                return conn && conn.send && conn.peerConnection && conn.peerConnection.iceConnectionState !== \"disconnected\";\n            });\n            connectionsArray.forEach((conn) => {\n                if (conn && conn.send && conn.peerConnection && conn.peerConnection.iceConnectionState !== \"disconnected\") {\n                    conn.send(gameState);\n                }\n            });\n        }, Config.SEND_STATE_INTERVAL);\n\n        setInterval(() => {\n            dispatch({\n                type: 'CHECK_CONNECTIONS'\n            });\n        }, Config.CHECK_CONNECTION_INTERVAL);\n\n        console.log('PeerJs setup complete!');\n    },[]);\n\n    return <React.Fragment></React.Fragment>;\n};\n","import React, { useContext } from \"react\";\nimport Config from '../Config';\nimport { Context } from '../GameState';\n\nexport const PlayersConnect = () => {\n\tconst { gameState, dispatch } = useContext(Context);\n\n\tlet numberOfPlayers = Object.keys(gameState.players).length;\n\tlet players = Object.keys(gameState.players).map((hardwareId) => { return gameState.players[hardwareId]; });\n\tlet hostPlayer = players.filter((player) => { return player.isHost; })[0];\n\tlet playerJsx = players.map((player, i) => {\n\t\treturn (\n\t\t\t<div key={i}>\n\t\t\t\tPlayer {i + 1}: {player.playerName}\n\t\t\t</div>\n\t\t);\n\t});\n\n\tfor (let i = numberOfPlayers; i < Config.MAX_PLAYERS; i += 1) {\n\t\tplayerJsx.push(\n\t\t\t<div key={i}>\n\t\t\t\tPlayer {i + 1}: ?\n  \t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h3>Spaceship Identifier: {gameState.hostId ? gameState.hostId.split('').join(' ') : \"Loading...\"}</h3>\n\t\t\t<div>\n\t\t\t\t<div>Number of Players Connected: {numberOfPlayers} out of {Config.MAX_PLAYERS}</div>\n\t\t\t\t{playerJsx}\n\t\t\t</div>\n\t\t\t{hostPlayer &&\n\t\t\t\t<h3>Start your engines when ready, {hostPlayer.playerName}!</h3>\n\t\t\t}\n\t\t</div>\n\t);\n}","import React, { useContext } from \"react\";\nimport Config from './Config';\nimport { PlayersConnect } from './gameScreens/PlayersConnect';\nimport { Context } from './GameState';\n\nconst GameContainer = () => {\n    const { gameState, dispatch } = useContext(Context);\n\n    if (gameState.phase === Config.GAME_STATE.PLAYERS_CONNECT) {\n        return <PlayersConnect />;\n    } else if (gameState.phase === Config.GAME_STATE.CHOOSE_ROLE) {\n        // return <ChooseRole />;\n    } else if (gameState.phase === Config.GAME_STATE.VOTE_JOURNEY) {\n\n    } else if (gameState.phase === Config.GAME_STATE.ON_JOURNEY) {\n\n    } else if (gameState.phase === Config.GAME_STATE.STATS_REVIEW) {\n\n    } else if (gameState.phase === Config.GAME_STATE.VOTE_SPY) {\n\n    } else if (gameState.phase === Config.GAME_STATE.JOURNEY_REVIEW) {\n\n    } else if (gameState.phase === Config.GAME_STATE.GAME_REVIEW) {\n\n    } else {\n        return <div>ERROR</div>;\n    }\n}\n\nexport default GameContainer;\n","import React from \"react\";\nimport { PeerJsManager } from \"./PeerJsManager\";\nimport GameContainer from \"./GameContainer\";\nimport { GameState, Context } from './GameState';\n\nconst appCss = {\n    fontFamily: \"'Poppins', sans-serif\",\n    fontSize: \"24px\",\n    color: \"#222\",\n    zIndex: 500,\n    position: \"absolute\",\n    top: \"0px\",\n    left: \"0px\",\n    width: \"calc(100% - 40px)\",\n    height: \"calc(100% - 40px)\",\n    padding: \"20px\"\n};\n\nconst setupChromeCast = () => {\n    if (window.navigator.userAgent.indexOf('CrKey') > -1) {\n        const options = new window.cast.framework.CastReceiverOptions();\n        options.disableIdleTimeout = true;\n\n        const instance = window.cast.framework.CastReceiverContext.getInstance();\n        instance.start(options);\n    }\n};\nsetupChromeCast();\n\n\nconst App = () => {\n    return (\n        <GameState>\n            <PeerJsManager />\n            <div className=\"App\" style={appCss}>\n                <GameContainer />\n            </div>\n        </GameState>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}